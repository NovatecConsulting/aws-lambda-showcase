* Welcome to our AWS Lambda showcase
* Agenda
 - Why serverless?
 - Create a simple function
 - Upload it manually
 - Provide API gateway
 - Setup a Travis CI pipeline
 - Make Travis upload the function
 - Add a path parameter to the function
 - Lessons learned
* Why serverless?
 - Speed
 - Don't have to do ops yourself
 - Cheaper (if you do it right)
* Create function code
** We use IntelliJ, Kotlin and Gradle
** Create your function
 - package novatec
 - class Hello
 - function handleRequest(): String
   For now, we will just return "Hello World!"
* Create Lambda function
 - We'll use the [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjgvJPZ6PPcAhUI2aQKHbnmB0EQFjAAegQICRAB&url=https%3A%2F%2Fconsole.aws.amazon.com%2Flambda%2Fhome&usg=AOvVaw2yrycDp_6fjYDa-4E9Hytx][Lambda Management Console]]
 - you can also use the [[https://docs.aws.amazon.com/cli/latest/reference/lambda/create-function.html][AWS CLI]]
* Upload the function manually
** Package the project in a fat jar/uberjar
 - A fat jar is necessary if you use external libraries,
   like the Kotlin runtime.
 - We use the Shadow plugin to run the shadowJar task.
** Upload the jar to AWS
** Set the code handler path
   In our case: ~novatec.Hello::handleRequest~
** Test it!
* Make it accessible to the rest of the world
** Create an API gateway
** Configure it for a plaintext response
 - There are some hard to remember steps...
 - In "Integration Request": Uncheck "Use Lambda Proxy integration"
 - In "Method Response":
   - Add Header "Content-Type"
   - Add Response Model with Content type "text/plain" and Model "empty"
 - In "Integration Response":
   - Add Mapping Value "'text/plain'" to the Response Header "Content-Type"
     Note the single quotes!
   - Change the Content-Type Mapping Template to "text/plain"
 - Don't worry, this was the annoying part.
** Deploy the API
** Call the API
* Set up Travis CI
** Use aws lambda CLI tool to update the function code
** Create a shell script to update the function code
#+BEGIN_SRC shell
   before_install:
    - pip install --user awscli
    - export PATH=$PATH:$HOME/.local/bin
#+END_SRC
** Set the AWS credentials for travis
* Add an argument to the lambda function
 - Create a new resource that takes a path param
 - Note: Integration Request Mapping Template always receives JSON!
   To pass the parameter ~name~ to our function, we need the template:
   ~"$input.params('name')"~
* Lessons learned
** It's fast
** It's hard to get started with the config
   And there's a lot of config!
** There are fewer use cases than you might think


* TODO
 * Terminal light theme
 * org-mode -> reveal.js
 * 2nd project to switch at the AWS credentials step
   * That
